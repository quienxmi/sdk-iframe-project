{"version":3,"file":"qxm-iframe-project.es.js","sources":["../src/constants/errors.ts","../src/constants/allowedDomains.ts","../src/utils/checkDomain.ts","../src/utils/decodeToken.ts","../src/index.ts"],"sourcesContent":["import { Errors } from '@interfaces';\n\nconst errors: Errors = {\n    SDK_CREATE: 'The SDK could not be found.',\n    IFRAME_NOT_FOUND: 'The iframe could not be found.',\n    DOM_NOT_IFRAME: 'You cannot build the iframe because the DOM is not an iframe.',\n    INVALID_TOKEN: 'The token is expired or has an error. It is necessary to generate the token again.',\n    INVALID_DOMAIN: 'The source domain is not supported.',\n    ERROR_LOADING_IFRAME: 'The iframe could not be loaded correctly.'\n}\n\nexport default errors;","export default [\n    'localhost',\n    '.sandboxqxm.com',\n    '.quienpormi.com',\n    '.quienxmi.com',\n    '.qxm.com.'\n];","import AllowedDomains from '../constants/allowedDomains';\n\nexport function checkDomain(url: string): boolean {\n    try {\n        const parsedUrl = new URL(url);\n        const hostname = parsedUrl.hostname;\n        return AllowedDomains.some(domain => {\n            if (domain === 'localhost') {\n                return hostname === 'localhost';\n            } else {\n                if (parsedUrl.protocol !== 'https:') {\n                    return false;\n                }\n                if (domain.endsWith('.')) {\n                    return hostname.slice(0, -2).endsWith(domain);\n                }\n                return hostname.endsWith(domain);\n            }\n        });\n    } catch (err) {\n        return false;\n    }\n}","import { TokenDecode } from '@interfaces';\n\nconst requiredKeys = [\n    'iss',\n    'iat',\n    'exp',\n    'data'\n];\n\nfunction checkKeysInObject(jsonPayload: TokenDecode): boolean {\n    const payloadKeys = Object.keys(jsonPayload);\n    return requiredKeys.every(key => payloadKeys.includes(key));\n}\n\nexport function decodeToken(token: string) {\n    try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload: TokenDecode = JSON.parse(decodeURIComponent(atob(base64).split('').map(function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join('')));\n        const currentTime = Math.floor(Date.now() / 1000);\n        if (jsonPayload.exp > currentTime && checkKeysInObject(jsonPayload)) {\n            return jsonPayload;\n        }\n        return null;\n    } catch (err) {\n        return null;\n    }\n}","import { Config, SubscriptionTypes, Observer, TokenDecode, EventObserver } from '@interfaces';\nimport './interfaces/global.d';\nimport Errors from './constants/errors';\nimport { checkDomain } from './utils/checkDomain';\nimport { decodeToken } from './utils/decodeToken';\nimport { version } from '../package.json';\n\nconst observersStructure = {\n    all: [],\n    resize: [],\n    modals: [],\n    error: []\n};\n\nclass QxmIframeProject {\n    public _domIframe?: HTMLIFrameElement;\n    public _observers: Observer = observersStructure;\n    \n    private _checkExp?: number | NodeJS.Timeout;\n    private _logs = false;\n\n    constructor(domOrStringIframe: HTMLIFrameElement | string, config: Config | null) {\n        try {\n            const { scrolling, resize, logs } = config ?? {};\n\n            if (typeof domOrStringIframe === 'string') {\n                this._domIframe = document.querySelector(domOrStringIframe)!;\n            } else {\n                this._domIframe = domOrStringIframe;\n            }\n\n            if (logs === true) {\n                this._logs = true;\n            }\n\n            if (this._logs) {\n                console.info('[QxmIframe]: Version ' + version)\n            }\n\n            if (!this._domIframe) {\n                this.errorLog('IFRAME_NOT_FOUND');\n                return;\n            }\n\n            if (!(this._domIframe instanceof HTMLIFrameElement)) {\n                this.errorLog('DOM_NOT_IFRAME');\n                return;\n            }\n\n            this._domIframe.setAttribute('frameborder', '0');\n\n            if (!(scrolling || false)) {\n                this._domIframe.setAttribute('scrolling', 'no');\n            }\n\n            this.createListener();\n\n            if (resize ?? true) {\n                this.subscribe('resize', this.resize);\n            }\n        } catch (e: any) {\n            this.errorLog('SDK_CREATE', e);\n        }\n    }\n\n    subscribe(type: SubscriptionTypes = 'all', callback: Function) {\n        this._observers[type].push(callback);\n    }\n\n    error(callback: Function) {\n        this.subscribe('error', callback);\n    }\n\n    modals(callback: Function) {\n        this.subscribe('modals', callback);\n    }\n\n    async setToken(token: string): Promise<TokenDecode | null> {\n        const tokenDecode: TokenDecode | null = decodeToken(token);\n\n        if (!tokenDecode) {\n            this.errorLog('INVALID_TOKEN');\n            return null;\n        }\n\n        if (!checkDomain(tokenDecode.iss)) {\n            this.errorLog('INVALID_DOMAIN');\n            return null;\n        }\n\n        this._checkExp = setInterval(() => {\n            const now = Math.floor(Date.now() / 1000);\n            if (tokenDecode.exp < now) {\n                this.errorLog('EXPIRED_TOKEN');\n                clearInterval(this._checkExp);\n            }\n        }, 1000);\n\n        if (!await this.setSrcIframe(tokenDecode.iss, token)) {\n            return null;\n        }\n\n        return tokenDecode;\n    }\n\n    destroy() {\n        this._domIframe = undefined;\n        this._observers = observersStructure;\n    }\n\n    private setSrcIframe(domain: string, token: string): Promise<boolean> {\n        return new Promise((resolve) => {\n            const domIframe = this._domIframe!;\n\n            const onLoad = () => {\n                clearEvents();\n                resolve(true);\n            };\n\n            const onError = () => {\n                this.errorLog('ERROR_LOADING_IFRAME');\n                clearEvents();\n                resolve(false);\n            };\n\n            const clearEvents = () => {\n                domIframe.removeEventListener('load', onLoad);\n                domIframe.removeEventListener('error', onError);\n            }\n\n            try {\n                domIframe.src = domain + '/api/iframe/project/create?token=' + token;\n                domIframe.addEventListener('load', onLoad);\n                domIframe.addEventListener('error', onError);\n            } catch (err) {\n                onError();\n            }\n        });\n    }\n\n    private createListener() {\n        window.addEventListener('message', (event: MessageEvent) => {\n            const { origin, data } = event;\n            if (checkDomain(origin)) {\n                if (this._logs) {\n                    console.log('[QxmIframe]:', data);\n                }\n                let type = data.type ?? 'all';\n                if (!this._observers[type]) {\n                    type = 'all';\n                }\n                this._observers[type].forEach((observer: Function) => observer({\n                    _domIframe: this._domIframe,\n                    data\n                }));\n            }\n        });\n    }\n\n    private errorLog(code: string, error: any = null) {\n        const message = Errors[code] ?? code;\n        if (this._logs) {\n            console.error('[QxmIframe]:', message, error);\n        }\n        this._observers.error.forEach((observer: Function) => observer({\n            _domIframe: this._domIframe,\n            code,\n            message,\n            error\n        }));\n    }\n\n    private resize(event: EventObserver) {\n        const { _domIframe, data } = event;\n        const styles = window.getComputedStyle(_domIframe);\n        const iframePadding = parseInt(styles.paddingTop) + parseInt(styles.paddingBottom);\n        _domIframe.style.setProperty('height', `${data.height + iframePadding}px`, 'important');\n    }\n}\n\nexport default QxmIframeProject;\nwindow.QxmIframeProject = QxmIframeProject;"],"names":["errors","AllowedDomains","checkDomain","url","parsedUrl","hostname","domain","requiredKeys","checkKeysInObject","jsonPayload","payloadKeys","key","decodeToken","token","base64","c","currentTime","observersStructure","QxmIframeProject","domOrStringIframe","config","__publicField","scrolling","resize","logs","version","e","type","callback","tokenDecode","now","resolve","domIframe","onLoad","clearEvents","onError","event","origin","data","observer","code","error","message","Errors","_domIframe","styles","iframePadding"],"mappings":"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"}